// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

// model Plan {
//   id            Int           @id @default(autoincrement())
//   nombre        String        @unique
//   tokens        Int
//   ilimit_tokesn Boolean  

//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt

//   userPlans     UserPlan[]
// }


// model User {
//   id          Int     @id @default(autoincrement())
//   email       String  @unique
//   password    String
//   is_active   Boolean @default(true)
//   is_pagado     Boolean @default(false)
//   used_tokens Int     @default(0)

//   id_rol      Int
//   rol         Rol     @relation(fields: [id_rol], references: [id])

//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   userPlans   UserPlan[]
//   subscriptions Subscription[]
// }

model Plan {
  id            Int      @id @default(autoincrement())
  nombre        String   @unique
  tokens        Int
  ilimit_tokesn Boolean  

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  users         User[]   // Relación uno a muchos con User
}


model User {
  id                   Int        @id @default(autoincrement())
  nombre              String
  apellidos           String
  nombre_empresa     String
  numero_empleados Int
  sector             String
  email                String     @unique
  password             String
  is_active            Boolean    @default(true)
  is_pagado            Boolean    @default(false)
  used_tokens          Int        @default(0)

  id_rol               Int
  rol                  Rol        @relation(fields: [id_rol], references: [id])

  planId               Int?       // puede ser null
  plan                 Plan?      @relation(fields: [planId], references: [id]) // relación opcional

  fechaPlanContratado  DateTime?  // opcional (por defecto null)

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  subscriptions        Subscription[]
  dailyRequests        DailyRequest[]
}


// model UserPlan {
//   id         Int      @id @default(autoincrement())
//   id_user    Int
//   id_plan    Int

//   user       User     @relation(fields: [id_user], references: [id])
//   plan       Plan     @relation(fields: [id_plan], references: [id])

//   start_date DateTime
//   end_date   DateTime
//   active     Boolean  @default(true)

//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

model Subscription {
  id              String   @id @default(cuid())
  userId          Int      // corregido: antes era String
  paypalId        String   @unique
  planId          String
  status          String
  startDate       DateTime
  nextBillingDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
}



model DailyRequest {
  day     DateTime
  total   Int      @default(0)
  userId  Int
  user    User     @relation(fields: [userId], references: [id])

  @@id([day, userId]) // clave compuesta para evitar duplicados por día y usuario
}



